/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that uint8_teract with a Xilinx device through a bus or uint8_terconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xil_io.h"

//#define ENABLE_DEBUG_LOG    // disable DEBUG_LOG

#ifdef ENABLE_DEBUG_LOG
#define LOG_D(x)  {  printf("DEBUG :");  printf(x);}
#else
#define LOG_D(x) // nothing
#endif


#define BASEADDR XPAR_ABP_WRAPPER_0_BASEADDR
#define REG_CR     0
#define REG_SR0    1
#define REG_SR1    2
#define REG_IER    3
#define REG_TxFF   4
#define REG_RxFF   5
#define REG_CHL    6
#define REG_CHH    7
#define REG_CHHL   8
#define REG_CHHH   9
#define REG_TxCLR  10
#define REG_INTRPT_CNT  0x10 //---DEC 16

#define START   0x01
#define STOP    0x02

#define FULL    16


//#define ENABLE_CLOCK_INFO
#define SYSTEM_FREQ 100000000
//#define SCL_FREQ    100000
#define SCL_FACTOR  1
// I2C Standard----
#define WRITE   0
#define READ    1
#define MATCH_CNTR 1000
#define NO_OF_SLAVE 2

int SCL_FREQ  = 500000;
int SCL_FARR[] = {100000, 500000, 1000000, 1500000, 2000000, 2500000, 3000000, 5000000, 10000000, 20000000, 25000000 };

int ITERATION =0;
int TMP_CNT;
int NACK_DATA_ENABLER = 0;

int SLAVE_ADDRESS;

uint8_t init_value;
uint8_t global_i;


uint8_t wr_arr[16*NO_OF_SLAVE];
uint8_t rd_arr[16*NO_OF_SLAVE];
uint8_t wr_flag[16*NO_OF_SLAVE]; // to maintain the flag of appropriate write in memory


int TX_INTR=0;
int RX_INTR=0;
int NEW_SCL=0;

int K_ ;
int SET_SCL_FCTR;
int scl_r=0;

//---------------------------------------------------------------------------------------------------

void RD_INTRPT_EN()
{
	Xil_Out8(BASEADDR+REG_IER, 5);
	//Xil_Out8(BASEADDR+REG_IER, 7);
}

void WR_INTRPT_EN()
{
	Xil_Out8(BASEADDR+REG_IER, 3);
	//Xil_Out8(BASEADDR+REG_IER, 7);
}

void DISABLE_INTRPT()
{
	Xil_Out8(BASEADDR+REG_IER, 0);

}

//------------Checking a bit is Set (1) or not -------------------

uint8_t isKBitSet(uint8_t n, uint8_t k)
{
    if (n & (1 << (k - 1)))
        return 1;
    else
        return 0;
}

//----------------Setting frequency---------------------
void set_clock(long SYS_freq, long SCL_freq)
{
	long cal_ch;
	long cal_chh;

	uint8_t chl,chh,chhl,chhh;
	uint8_t value=0;


	cal_ch = SYS_freq/(2*SCL_freq);
	cal_chh = SYS_freq/(4*SCL_freq);

	chl = cal_ch;
	chh = (0xFF00 & cal_ch)>>8;
	chhl = cal_chh;
	chhh = (0xFF00 & cal_chh)>>8;

	Xil_Out8(BASEADDR+REG_CHL, chl);
	Xil_Out8(BASEADDR+REG_CHH, chh);
	Xil_Out8(BASEADDR+REG_CHHL, chhl);
	Xil_Out8(BASEADDR+REG_CHHH, chhh);

#ifdef ENABLE_CLOCK_INFO
	value = Xil_In8(BASEADDR+REG_CHL);
	 printf(" CHL data : 0x%x \n", value);

	 value = Xil_In8(BASEADDR+REG_CHH);
	 printf(" CHH data : 0x%x \n", value);

	 value = Xil_In8(BASEADDR+REG_CHHL);
	 printf(" CHHL data : 0x%x \n", value);

	  value = Xil_In8(BASEADDR+REG_CHHH);
      printf(" CHHH data : 0x%x \n", value);
#endif

}
void reset_tx_fifo()
{
	Xil_Out8(BASEADDR+REG_TxCLR, 0xFF);

}

//---------------Checking TxFIFO is empty or not
uint8_t chk_clr_TxFIFo()
{
	uint8_t value=0;
	value = Xil_In8(BASEADDR+REG_SR0);

//	 printf("Read Value : 0x%x \n", value);

	if(isKBitSet(value,4))
	  {
		LOG_D(" TxFF is Empty \n");
        return 1;
	  }
	else
	{
      LOG_D(" TxFF is Not Empty \n");
	  LOG_D("  Clearing the FIFO. \n");
	  Xil_Out8(BASEADDR+REG_TxCLR, 0xFF);
	  chk_clr_TxFIFo();
	}

	return 0;
}

//-------------------Check TX FIFO Full-----------------
uint8_t Is_TXFIFO_Full()
{
	uint8_t value=0;
	value = Xil_In8(BASEADDR+REG_SR0);

	if(isKBitSet(value,3))
	  {
		TX_INTR++;
		LOG_D(" TxFF is Full \n"); //printf(" TX INTRPT asserted \n");
        return 1;
	  }
	else

	 // { printf(" TxFF is Not Full... Continue \n"); }

	return 0;
}


//------------------------------------------------------------------------------------------
//-----------------------------------------



//----------------checking the STOP FLAG--------------------
uint8_t stop_flag()
{
	uint8_t value=0;
	value = Xil_In8(BASEADDR+REG_SR0);

	if(isKBitSet(value,2))
	  {
		LOG_D(" Stop Flag Sent \n");
        return 1;
	  }
	else

	 // printf(" TxFF is Not Full... Continue \n");

	return 0;

}
uint8_t Is_TxCompl()
{
	uint8_t value=0;
	value = Xil_In8(BASEADDR+REG_SR0);

	if(isKBitSet(value,5))
	  {
		LOG_D(" Tx is Completed \n");
        return 1;
	  }
	else

	 // { printf(" TxFF is Not Full... Continue \n"); }

	return 0;
}


//------ START or STOP operation------------------
void start_stop_write(uint8_t strt_stp)
{
    Xil_Out8(BASEADDR, strt_stp);
}

//-----------------------------------------------------------------
void slv_addr (uint8_t addr, uint8_t rw)
{

     // rw =  0 : Write
	//      = 1 : Read

 	 uint8_t slave_addr = SLAVE_ADDRESS;

 	 slave_addr = (slave_addr << 5);

	 uint8_t addr_tr = (addr << 1);
	 uint8_t addr_db = addr_tr+rw;

	  Xil_Out8(BASEADDR+REG_TxFF, addr_db+slave_addr );

	  //printf("Address 0x%x \n",addr_db+slave_addr);

}

//----check NACK---------------------
uint8_t Is_NACK()
{
	uint8_t value=0;
	value = Xil_In8(BASEADDR+REG_SR1);

	// printf("Read Value : 0x%x \n", value);

	if(isKBitSet(value,1))
	  {
		LOG_D("Received NACK  \n"); //printf("Recieved NACK \n");
        return 1;
	  }
	else
	{
	  //printf(" No NACK ... \n ");
	   return 0;
	}


}
//-----------------------------

void wait4space()
{
   while(Is_TXFIFO_Full());           //-------- Wait for space in fifo

}

//------------------------------------------------------------------------------------------------

void SET_FCTR ()
{
	SET_SCL_FCTR =0;

    start_stop_write(START);          // setting start bit

    WR_INTRPT_EN ();                  //Enable TX Interrupt

    slv_addr(0, WRITE);


	while(!Is_TXFIFO_Full())
	{
		  Xil_Out8(BASEADDR+REG_TxFF, 0x00);
		  wr_flag[SET_SCL_FCTR + 16*SLAVE_ADDRESS] = 0;
		  SET_SCL_FCTR++;


	}


    while(!Is_TxCompl())                         // Waiting for Tx Complete
 	   ;
    LOG_D(" Tx is completed... Let's Check NACK...\n ");

    if(Is_NACK()){
    	LOG_D(" NACK is asserted... Please, Restart Process...\n ");


    	reset_tx_fifo();
         }
    else {
    	LOG_D(" NACK is not asserted ... Let's STOP Operation...\n ");
    	  start_stop_write(STOP);
    	}

    while(!stop_flag())        // waiting for STOP FLAG
          ;


    DISABLE_INTRPT();
    TX_INTR++;

	if(SET_SCL_FCTR < 16)
		SET_SCL_FCTR = 15;

	//TX_INTR = Xil_In32(BASEADDR+REG_INTRPT_CNT);
}



//-----------------Writing continous data uint8_to TxFF while it is full
void write_data_fifo (uint8_t start_add, uint8_t value, uint8_t No_txn)
{
	uint8_t i=0;
	uint8_t addr = 0;
 	while(!Is_TXFIFO_Full()) {


 	//	 printf(" start_add : %d \n", start_add);
 	  addr = (start_add+i)%16;
 	  addr = addr+16*SLAVE_ADDRESS;
 	  wr_arr[addr] = value+i ;
      wr_flag[addr] = 1;
     // printf(" Write data : %d \n", addr);

	  Xil_Out8(BASEADDR+REG_TxFF, value+i);
	  //printf(" Write data : %d \n", value+i);
	  ++i;

	//  if(No_txn <= 25)
	  if(No_txn <= SET_SCL_FCTR)
	    Is_TXFIFO_Full();

	 if(i==No_txn)
	  break;
 	}
 	//for(int i = 0; i < 16*NO_OF_SLAVE; ++i)
 	//    printf("aaaaRead Data Array & WR Data Array: 0x%x, 0x%x,0x%x  \n", rd_arr[i ], wr_arr[i ], wr_flag[i]);


}

//-----------------Writing continous data uint8_to TxFF while it is full
void write_64_fifo (uint8_t start_add, uint8_t value, uint8_t No_txn)
{
	uint8_t i=0;
	uint8_t addr = 0;

 	for(i=0; i<64; ++i)
 	{

 	 	  addr = (start_add+i)%16;
 	 	  addr = addr+16*SLAVE_ADDRESS;
 	 	  wr_arr[addr] = value+i ;
 	      wr_flag[addr] = 1;
 	     // printf(" Write data : %d \n", addr);

 		  Xil_Out8(BASEADDR+REG_TxFF, value+i);
 		  //printf(" Write data : %d \n", value+i);
 		  //++i;

 		//  if(No_txn <= 25)
 		  if(No_txn <= SET_SCL_FCTR)
 		    if(Is_TXFIFO_Full())
 		    	wait4space();

 	}


}

void write_random_data (uint8_t start_add, uint8_t No_txn)
{
	uint8_t val=0;


 	while(No_txn) {


 	   val = rand() % 256;
       val = ((NACK_DATA_ENABLER == 1) ? 0xCD : val&0XFE);
       wr_arr[start_add + 16*SLAVE_ADDRESS] = val ;
	   Xil_Out8(BASEADDR+REG_TxFF, val);


	//   printf(" write value:  0x%x @ %d \n", val,start_add);

	   start_add++ ;
	   start_add = start_add%16 ;

	  // if(No_txn <= 16)
	   if(No_txn <= 16)
	    if(Is_TXFIFO_Full())
	    	wait4space();

	   --No_txn;
	  //printf(" Write data : %d \n", val);

 	}

}


//-------------------WRITE_OPERTION----------------------
void write_opertion (uint8_t start_add, uint8_t start_val, uint8_t  no_txn)
{
	LOG_D(" \n *** Start Write Operation... *** \n ");

  // int scl_fctr=0;
   int restart_ = 0;
   int val = start_val;

	init_value = start_val; // It will be used for comparison in read operation

    chk_clr_TxFIFo();

//-------------------------------------------------------------------
    //K_++;
    if(K_ % (10*MATCH_CNTR) == 0)
     {
    	SCL_FREQ = (SCL_FREQ >= 1000000) ? SCL_FREQ : SCL_FREQ+10;
    	//scl_fctr = rand() % SCL_FACTOR;
    	 ITERATION++;
    	 NEW_SCL=1;

 		if(SCL_FREQ>1000000)
 			NEW_SCL=0;
     }
    set_clock(SYSTEM_FREQ, SCL_FREQ);      //setting the value of CHL, CHH, CHHL, CHHH
  //  set_clock(SYSTEM_FREQ, 10000000);

    if(NEW_SCL==1)
    { SET_FCTR();
    //  printf("SET_SCL_FCTR :  %d", SET_SCL_FCTR);
       NEW_SCL=0;
    }
//-----------------------------------------------------------------------

    RESTART_ :

    start_stop_write(START);          // setting start bit

   // count = Xil_In8(BASEADDR+REG_INTRPT_CNT);
  //  printf(" B4_WR ... %d \n", count);

    WR_INTRPT_EN ();                  //Enable TX Interrupt

   // count = Xil_In8(BASEADDR+REG_INTRPT_CNT);
  //  printf(" AFTER_TX ... %d \n", count);

    if(restart_)
      {
    	start_val = start_val+1;
    	//start_add = start_add+1;
      }

    slv_addr(start_add, WRITE);


    write_64_fifo(start_add, start_val, no_txn);
   //  write_data_fifo (start_add, start_val, no_txn);
   // write_random_data(start_add, no_txn);

  //  count = Xil_In8(BASEADDR+REG_INTRPT_CNT);
  //  printf(" AFTER_WR... %d \n", count);

    while(!Is_TxCompl())                         // Waiting for Tx Complete
 	   ;
    LOG_D(" Tx is completed... Let's Check NACK...\n ");


  //  count = Xil_In8(BASEADDR+REG_INTRPT_CNT);
  //  printf(" AFTER_TX_COM... %d \n", count);


    if(Is_NACK()){
    	LOG_D(" NACK is asserted... Please, Restart Process...\n ");

    	restart_ = 1;
    	reset_tx_fifo();
    	goto RESTART_ ;
         }
    else {
    	LOG_D(" NACK is not asserted ... Let's STOP Operation...\n ");
    	  start_stop_write(STOP);
    	}

    while(!stop_flag())        // waiting for STOP FLAG
          ;

  //  count = Xil_In8(BASEADDR+REG_INTRPT_CNT);
  //  printf(" AFTER_STOP_COM... %d \n", count);


    DISABLE_INTRPT();
    TX_INTR++;
 //   count = Xil_In8(BASEADDR+REG_INTRPT_CNT);
 //   printf(" AFTER_DISABLED... %d \n", count);



    LOG_D(" \n ***  Write Operation Completed ... *** \n ");

}

//----------------------------READING Function----------------------------------------

uint8_t Is_RxFIFO_Empty()
{
	uint8_t value=0;
	value = Xil_In8(BASEADDR+REG_SR0);

    if(isKBitSet(value,7))
	  {
    	RX_INTR++;
    	LOG_D(" RxFIFO is Empty \n"); //printf(" RX INTRPT asserted \n");
        return 1;
	  }
	else

	 // printf(" TxFF is Not Full... Continue \n");

	return 0;
}
//------ START or STOP Read operation------------------
void start_stop_read(uint8_t strt_stp)
{


    Xil_Out8(BASEADDR, strt_stp);

}

//---------------------------------------------------------

uint8_t Is_RxCompl()
{
	uint8_t value=0;
	value = Xil_In8(BASEADDR+REG_SR0);


	//printf("SRO_VALUE, %d", value );


	//printf("Waiting for Rx completion \n");

	if(isKBitSet(value,8))
	  {
		LOG_D(" Rx Completed \n");
        return 1;
	  }
	else

	 // printf(" TxFF is Not Full... Continue \n");

	return 0;

}

uint8_t compare_value(uint8_t value)
{
   if(init_value + global_i == value)
	   return 1;
   else
   { printf("Read Value Mismatch with Write: 0x%x, 0x%x \n", value, init_value + global_i);
     return 0;
   }

}
//-----------------------------------------------------------------------------



uint8_t compare_()
{


	for(int i = 0+16*SLAVE_ADDRESS; i < (16+16*SLAVE_ADDRESS); ++i)
     if(wr_flag[i]==1)
     { if(rd_arr[i] != wr_arr[i])
         return 1;
     }
     else
    	 printf("#");
return 0;

}




//-------------------READ_OPERTION----------------------
void read_opertion (uint8_t Start_Addr,  uint8_t read_bytes)
{
	uint8_t start_seq;
    uint8_t value = 0;
    uint8_t cmpr = 0;

    uint8_t i =  Start_Addr + 16*SLAVE_ADDRESS;
    //int scl_fctr=0;

    LOG_D(" \n*** Start Read Operation... *** \n ");

    chk_clr_TxFIFo();

   if(K_ % (10*MATCH_CNTR) == 0)
   {
	   SCL_FREQ = (SCL_FREQ >= 1000000) ? SCL_FREQ : SCL_FREQ+10;
	//   scl_fctr = rand() % SCL_FACTOR;
		ITERATION++;
		NEW_SCL=1;

		if(SCL_FREQ>1000000)
			NEW_SCL=0;
   }

    set_clock(SYSTEM_FREQ, SCL_FREQ);      //setting the value of CHL, CHH, CHHL, CHHH

    RESTART_ :


   // set_clock(SYSTEM_FREQ, 10000000);

    start_seq = read_bytes <<2;
    start_seq++;

    // printf(" Read start command:  0x%x",start_seq );

    start_stop_read(start_seq);                 // Setting the start with number of read length

  /*  count = Xil_In8(BASEADDR+REG_INTRPT_CNT);
    printf(" Read MID_B4XEN ... %d \n", count);

    count = Xil_In8(BASEADDR+REG_SR1);
    printf(" Read SR1 ... %d \n", counlongt);
*/

    RD_INTRPT_EN();                             // Enabling the  Read Interrupt

  /*  count = Xil_In8(BASEADDR+REG_INTRPT_CNT);
    printf(" Read MID_RXEN ... %d \n", count);

    count = Xil_In8(BASEADDR+REG_IER);
    printf(" REG_IER ... %d \n", count);

    count = Xil_In8(BASEADDR+REG_SR1);
    printf(" Read SR1 ... %d \n", count);
*/

    slv_addr(Start_Addr, READ);                // Setting slave address

   while(!Is_TxCompl())                         // Waiting for Tx Complete
	   ;

    if(Is_NACK()){                              // Checking the NACK

    	LOG_D(" NACK is asserted... Please, Wait and Restart Process...\n ");

    	  while(!stop_flag())        // waiting for STOP FLAG
               ;
    	 // reset_tx_fifo();
    	  goto RESTART_ ;
         }


    while(!Is_RxCompl())      // wait for RX completion
           ;

    LOG_D("Waiting for RX completion \n ");
//    Is_RxFIFO_Empty();

    //uint8_t value=0;
    	//value = Xil_In8(BASEADDR+REG_SR0);

    	//printf(" SRO_value:  0x%x \n",value );


    //    count = Xil_In8(BASEADDR+REG_INTRPT_CNT);
    //    printf(" Read MID_RX ... %d \n", count);

    	while(!Is_RxFIFO_Empty())
     {
        value = Xil_In8(BASEADDR+REG_RxFF); // Reading of RX FIFO till it empty
      //  printf(" read value :  0x%x @  %d \n",value, i);

         rd_arr[i] = value;
          ++i ;
          i = i% 16 ;
          i = i+ 16*SLAVE_ADDRESS;
    //  cmpr = compare_value(value);
    //     if(!cmpr)
     //       break;

     //    ++global_i ;

     }

 /*  if(global_i==read_bytes)
	   LOG_D(" Read Value is MATCHED with Write \n");

   global_i=0;
*/
    while(!stop_flag())        // waiting for STOP FLAG
                   ;
    start_stop_write(STOP);

 //   count = Xil_In8(BASEADDR+REG_INTRPT_CNT);
 //   printf(" Read End_RX ... %d \n", count);

  //  DISABLE_INTRPT();
    LOG_D(" \n ***  Read Operation Completed ... *** \n ");

}

int read_count_val()
{

	return Xil_In8(BASEADDR+REG_INTRPT_CNT);

}


int print_status_val(int i )
{
	int error_ = 0;  // set error when data not matched

	 read_opertion(0x00, FULL);

	 if(compare_()==1)
	    {  printf(" ERROR : DATA is Not Matched... \n");

	    for(int i = 0+16*SLAVE_ADDRESS; i < (16+16*SLAVE_ADDRESS); ++i)
	          printf("Read Data Array & WR Data Array: 0x%x, 0x%x \n", rd_arr[i], wr_arr[i]);

	       error_ =  1;
	   	 }
	   else
	   	  {
		   // printf(" STATUS : DATA is Matched... \n");
		     if(i == MATCH_CNTR)
		     printf(".");

		   error_ =  0;
	   	  }
	//  print_intrpt();
	  int count = Xil_In32(BASEADDR+REG_INTRPT_CNT);
	   // printf(" Read START_RX ... %d \n", count);

	  //if(count == (TX_INTR+RX_INTR))
	  if(count >= (TX_INTR+RX_INTR) && count <= (TX_INTR+RX_INTR+100*ITERATION+10))
	   {
		  //printf("INTERRUPT COUNT is Matched...%d \n\n" , count);
		  if(i == MATCH_CNTR)
		  {  printf("*\n");
		     TMP_CNT=0;
		  }

		  error_ = error_ + 0;
	   }
	  else
	  { printf("ERROR : INTERRUPT is not Matched... From HW, SW  : %d,  %d \n\n",count,(TX_INTR+RX_INTR)); error_ =  1;}

	  return error_;
}

void print_intrpt()
{
  int count = Xil_In32(BASEADDR+REG_INTRPT_CNT);
  printf(" INTERRUPT COUNT ...HW,SW %d, %d \n", count,TX_INTR+RX_INTR);

}


void print_status_final()
{
	 read_opertion(0x00, FULL);

	 if(compare_())
	    {  printf(" FINAL STATUS: [ERROR], DATA is Not Matched... \n");

	       for(int i = 0; i < 16*NO_OF_SLAVE; ++i)
	          printf("Read Data & Write Data : 0x%x, 0x%x \n", rd_arr[i], wr_arr[i]);

	   	 }
	   else
	   	  {
		    printf(" FINAL STATUS : DATA is Matched... \n");
	   	  }

	  int count = Xil_In32(BASEADDR+REG_INTRPT_CNT);
	   // printf(" Read START_RX ... %d \n", count);

	  if(count >= (TX_INTR+RX_INTR) && count <= (TX_INTR+RX_INTR+10*ITERATION))
	   {
		  printf(" FINAL STATUS : INTERRUPT COUNT is Matched...%d \n\n" , count);
		  //printf("*");
	   }
	  else
	     printf(" FINAL STATUS : [ERROR], INTERRUPT is not Matched...HW,SW: %d, %d \n\n",count,(TX_INTR+RX_INTR));


}





int main()
{
    init_platform();



    printf("\n Hello World.... Testing the APB-I2C...\n");

    ///////////////////////////////////////////////
   //   read_opertion(START_ADD, No_of_BYTES);   //
   //////////////////////////////////////////////

//    read_opertion(0x00, FULL);

 ////////////////////////////////////////////////////////////
 //    write_opertion(START_ADD, START_VALUE, No_of_TXN);  //
 ///////////////////////////////////////////////////////////

  // write_opertion(0x00, 0x00, FULL);

	 //  write_opertion(0x00, 1, FULL);
// read_opertion(0x00, FULL);
/*
 for(uint8_t i=0; i<15; ++i)
 {  printf(" REading again \n");
    read_opertion(i, FULL); }
*/

 //print_status_val();

  //  write_opertion(0x00, 0xa0, 17);
   //  print_status_final();


    long n = 5000;

    int r=0;
    uint8_t rnd_data;
    uint8_t rnd_addr;
    uint8_t rnd_byte;


   uint8_t START_ADD ;
   uint8_t START_DATA ;
   uint8_t NO_BYTE;

   uint8_t rd_wr;    // read = 1; write =0;

   //scanf("Please enter the number of txn : %d", &n);

   K_ = 0;


   SLAVE_ADDRESS = 1;

   Xil_Out32(BASEADDR+REG_INTRPT_CNT, 0x00); // Zeroing the counter_reg in wrapper

for (int r=0;r<6;++r)
{
	  printf("NEW VALUE OF SCL_FREQ(r) is SETTED : %d \n", SCL_FARR[r]);

	  SCL_FREQ = SCL_FARR[r]; // Selecting a frequency from Frequency Array

   for(K_=0; K_<n; ++K_)
   {
	   rnd_data = rand() % 256;
	   rnd_addr = rand() % 16;
	   //rnd_byte = rand() % 31;
       rnd_byte = rand() % 31;    // For Varying Frequency...................
       rd_wr = rand() % 2;

       //rd_wr = K_;
       START_ADD = rnd_addr;
	   START_DATA = rnd_data;
       NO_BYTE = rnd_byte;
       SLAVE_ADDRESS = rand() % 2;

      if(NO_BYTE>0)
      {
       // printf(": START_ADD, NO_BYTE, rd_wr, W_DATA_ %d, %d, %d,0x%x  \n", START_ADD, NO_BYTE, rd_wr, START_DATA);

        if(rd_wr==WRITE)
          write_opertion(START_ADD, START_DATA, NO_BYTE);
        else
          read_opertion(START_ADD, NO_BYTE);

	     //  printf("Write and Read Operation %d is completed \n ", i+1);
        TMP_CNT += 1;

       if(print_status_val(TMP_CNT)==1)
    	   break;

  //     for(int i = 0; i < 16*NO_OF_SLAVE; ++i)
   //        printf("Read Data Array & WR Data Array: 0x%x, 0x%x,0x%x  \n", rd_arr[i ], wr_arr[i ], wr_flag[i]);

      }
     }


   }
   print_status_final();

   //read_opertion(0x15, 2);
   //write_opertion(0x15, 0x00, FULL);
   //print_status_final();
   //read_opertion(0x00, FULL);
   //print_status_final();
  // write_opertion(0x00, 0x00, FULL);
  // print_status_final();
  // write_opertion(0x06, 0x00, 20);
 //  print_status_final();

//   write_opertion(0, 0xCD, 16);
//   print_intrpt();
 //  print_status_final();

   write_opertion(0, 0xbd, 16);
   print_status_final();

   write_opertion(0, 0xCD, 16);
  // print_intrpt();

   SLAVE_ADDRESS = 0;

   write_opertion(0, 0xCC, 16);
 //  print_intrpt();
   print_status_final();

   write_opertion(0, 0xc0, 16);
  // print_intrpt();
   print_status_final();


 //  print_intrpt();
   print_status_final();

   write_opertion(0, 0xbe, 16);
  // print_intrpt();
   print_status_final();


   write_opertion(0, 0xbf, 16);
   print_status_final();

   SLAVE_ADDRESS = 0;

   write_opertion(0, 0xc0, 16);
   print_status_final();

   write_opertion(0, 0xc3, 16);
   print_status_final();

   write_opertion(0, 0xcd, 16);
   print_status_final();

   write_opertion(0, 0xc9, 16);
   print_status_final();

    slv_addr(1,WRITE);


 /*  for(int i=0; i<1;++i) {
     write_opertion(0x00, 0x0, FULL);
     read_opertion(0x00, FULL);
     print_status_val(i);
    }*/
 //  print_status_final();
   for(int i = 0; i < 16*NO_OF_SLAVE; ++i)
      printf("Read Data Array & WR Data Array: 0x%x, 0x%x,0x%x  \n", rd_arr[i ], wr_arr[i ], wr_flag[i]);

    printf("\n Tested the APB-I2C...\n");

    cleanup_platform();
    return 0;
}












