/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xil_io.h"

#define BASEADDR XPAR_ABP_WRAPPER_0_BASEADDR
#define REG_CR     0
#define REG_SR0    1
#define REG_SR1    2
#define REG_IER    3
#define REG_TxFF   4
#define REG_RxFF   5
#define REG_CHL    6
#define REG_CHH    7
#define REG_CHHL   8
#define REG_CHHH   9
#define REG_TxCLR  10

#define START   0x01
#define STOP    0x02


//------------Checking a bit is Set (1) or not -------------------

int isKBitSet(int n, int k)
{
    if (n & (1 << (k - 1)))
        return 1;
    else
        return 0;
}

//----------------Setting frequency---------------------
void set_clock(int SYS_freq, int SCL_freq)
{
}

//---------------Checking TxFIFO is empty or not
int chk_clr_TxFIFo()
{
	int value=0;
	value = Xil_In8(BASEADDR+REG_SR0);

//	 printf("Read Value : 0x%x \n", value);

	if(isKBitSet(value,4))
	  {
		printf(" TxFF is Empty \n");
        return 1;
	  }
	else
	{
	  printf(" TxFF is Not Empty \n");
	  printf("  Clearing the FIFO. \n");
	  Xil_Out8(BASEADDR+REG_TxCLR, 0xFF);
	  chk_clr_TxFIFo();
	}

	return 0;
}

//-------------------Check FIFO Full-----------------
int Is_FIFO_Full()
{
	int value=0;
	value = Xil_In8(BASEADDR+REG_SR0);

	if(isKBitSet(value,3))
	  {
		printf(" TxFF is Full \n");
        return 1;
	  }
	else

	 // printf(" TxFF is Not Full... Continue \n");

	return 0;
}
//--------------------------------------------------

int Is_TxCompl()
{
	int value=0;
	value = Xil_In8(BASEADDR+REG_SR0);

	if(isKBitSet(value,5))
	  {
		printf(" Tx is Completed \n");
        return 1;
	  }
	else

	 // printf(" TxFF is Not Full... Continue \n");

	return 0;
}


//------ START or STOP operation------------------
void start_stop_write(uint8_t strt_stp)
{
    Xil_Out8(BASEADDR, strt_stp);

}

//-----------------------------------------------------------------
void slv_addr (uint8_t addr, int rw)
{

     // rw =  0 : Write
	//      = 1 : Read


	 uint8_t addr_tr = (addr & 0xFE);
	 uint8_t addr_db = addr_tr+rw;

	  Xil_Out8(BASEADDR+REG_TxFF, addr_db );


}

//-----------------Writing data into TxFF while it is full
void write_data_fifo (int value)
{
	int i=0;
/*for(i=0; i<15;++i)
	{ Xil_Out8(BASEADDR+REG_TxFF, value+i); //printf(" Write data : %d \n", value+i);

	}
*/
 	while(!Is_FIFO_Full()) {

	  Xil_Out8(BASEADDR+REG_TxFF, value+i);
	//  printf(" Write data : %d \n", value+i);
	  ++i;
	//  if(i==4)
	//	  break;
 	}
 	printf(" No of operation performed is : %d \n", i);

}

//----check NACK---------------------
int Is_NACK()
{
	int value=0;
	value = Xil_In8(BASEADDR+REG_SR1);

	// printf("Read Value : 0x%x \n", value);

	if(isKBitSet(value,1))
	  {
		printf("Received NACK  \n");
        return 1;
	  }
	else
	{
	  //printf(" No NACK ... \n ");
	   return 0;
	}


}


//-------------------WRITE_OPERTION----------------------
void write_opertion ()
{
	printf(" \n *** Start Write Operation... *** \n ");

    chk_clr_TxFIFo();
  // TODO : set CHL, CHH, CHHL, CHHH

    RESTART_ :

    start_stop_write(START);
    slv_addr(0x00,0);
    write_data_fifo (0x0);

    if(Is_NACK()){
    	  printf(" NACK is asserted... Please, Restart Process...\n ");
    	  goto RESTART_ ;
         }
    else {
    	  printf(" NACK is not asserted ... Let's STOP Operation...\n ");
    	  start_stop_write(STOP);
    	}
	int value=0;
	value = Xil_In8(BASEADDR+REG_SR0);

	printf("SRO_VALUE, 0x%x", value );


    printf(" \n ***  Write Operation Completed ... *** \n ");

}

//----------------------------READING Function----------------------------------------

int Is_RxFIFO_Empty()
{
	int value=0;
	value = Xil_In8(BASEADDR+REG_SR0);

//	printf("SRO_VALUE, %d", value );

    if(isKBitSet(value,7))
	  {
		printf(" RxFIFO is Empty \n");
        return 1;
	  }
	else

	 // printf(" TxFF is Not Full... Continue \n");

	return 0;
}
//------ START or STOP Read operation------------------
void start_stop_read(uint8_t strt_stp)
{


    Xil_Out8(BASEADDR, strt_stp);

}

uint8_t read_start_seq(uint8_t read_bytes)
{
  return ( (read_bytes == 1) ? (0x03) : (0x41) );
}

//----------------checking the STOP FLAG--------------------

uint8_t stop_flag()
{
	int value=0;
	value = Xil_In8(BASEADDR+REG_SR0);

	if(isKBitSet(value,2))
	  {
		printf(" Stop Flag Sent \n");
        return 1;
	  }
	else

	 // printf(" TxFF is Not Full... Continue \n");

	return 0;

}
//---------------------------------------------------------

uint8_t Is_RxCompl()
{
	int value=0;
	value = Xil_In8(BASEADDR+REG_SR0);


	//printf("SRO_VALUE, %d", value );


	//printf("Waiting for Rx completion \n");

	if(isKBitSet(value,8))
	  {
		printf(" Rx Completed \n");
        return 1;
	  }
	else

	 // printf(" TxFF is Not Full... Continue \n");

	return 0;

}
//-------------------WRITE_OPERTION----------------------
void read_opertion (uint8_t read_bytes)
{
	uint8_t start_seq;
  //  int value=0;

    printf(" \n *** Start Read Operation... *** \n ");

	int value=0;
//	value = Xil_In8(BASEADDR+REG_SR0);


    RESTART_ :

    chk_clr_TxFIFo();
  // TODO : set CHL, CHH, CHHL, CHHH

	//start_seq = read_start_seq(read_bytes);     // calculating the sequence

    start_stop_read(0x21);                 // Setting the start with number of read length
   // slv_addr(0x00,03);                           // Setting slave address

    Xil_Out8(BASEADDR+REG_TxFF, 0x01);

   while(!Is_TxCompl())                         // Waiting for Tx Complete
	   ;

    if(Is_NACK()){                              // Checking the NACK

    	  printf(" NACK is asserted... Please, Wait and Restart Process...\n ");

    	  while(!stop_flag())        // waiting for STOP FLAG
               ;
    	  goto RESTART_ ;
         }

    while(!Is_RxCompl())      // wait for RX completion
           ;

    printf(" \nWaintig for RX completion ");
//    Is_RxFIFO_Empty();

    while(!Is_RxFIFO_Empty())
     {
        value = Xil_In8(BASEADDR+REG_RxFF); // Reading of RX FIFO till it empty
        printf("Read Value : 0x%x \n", value);

     }

    while(!stop_flag())        // waiting for STOP FLAG
                   ;
    start_stop_write(STOP);

    printf(" \n ***  Read Operation Completed ... *** \n ");

}





int main()
{
    init_platform();



    printf("\nHello World.... Testing the APB-I2C...\n\r");



  //  write_opertion();
  //  read_opertion(0x01);
    write_opertion();
   // write_opertion();
    read_opertion(0x01);
    read_opertion(0x01);


//    value = chk_clr_TxFIFo();
  // TODO :
//    Xil_Out8(BASEADDR, 0x01);

  //  slv_addr(0x00,0);
  //  write_data_fifo (0x0);
  //  Is_NACK();
 /*   Xil_Out8(BASEADDR, 0x12);
    value = Xil_In8(BASEADDR);
    printf("Read Value : 0x%x \n", value);

   // Xil_Out8(BASEADDR+8,25);
    value = Xil_In8(BASEADDR+8);
    printf("Read Value : %d \n", value);


   // Xil_Out8(BASEADDR+6,25);
    value = Xil_In8(BASEADDR+6);
    printf("Read Value : %d \n", value);

*/
    cleanup_platform();
    return 0;
}




